from aiogram import types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup

router = Router()

ITEMS_PER_PAGE = 5

class GotoPage(StatesGroup):
    waiting_for_page_number = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def get_pagination_keyboard(page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
    buttons = []

    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}:{page - 1}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{prefix}:{page + 1}"))

    # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    buttons.append(InlineKeyboardButton(text="üî¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data=f"{prefix}:goto"))

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    keyboard = []
    if len(buttons) > 2:
        keyboard.append(buttons[:-1])  # –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥/–í–ø–µ—Ä—ë–¥
        keyboard.append([buttons[-1]])  # –∫–Ω–æ–ø–∫–∞ –ü–µ—Ä–µ–π—Ç–∏
    else:
        keyboard.append(buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def send_paginated_data(message: Message, items: list, formatter, callback_prefix: str, page: int = 0):
    total_pages = (len(items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    current_items = items[start:end]

    text = "\n\n".join(formatter(item) for item in current_items)
    text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    keyboard = get_pagination_keyboard(page, total_pages, callback_prefix)

    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@router.callback_query(F.data.regexp(r'^(courses|resources|terms):(\d+)$'))
async def paginate_callback(call: CallbackQuery):
    prefix, page = call.data.split(":")
    page = int(page)

    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ send_paginated_data)
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞–∂—É –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π, —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
    if prefix == "courses":
        from handlers.main_handler import load_courses
        await load_courses(call.message, page=page)
    elif prefix == "resources":
        from handlers.main_handler import load_resources
        await load_resources(call.message, page=page)
    elif prefix == "terms":
        from handlers.main_handler import load_terms
        await load_terms(call.message, page=page)

    await call.answer()

# –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
@router.callback_query(F.data.regexp(r'^(courses|resources|terms):goto$'))
async def goto_page_prompt(call: CallbackQuery, state: FSMContext):
    prefix = call.data.split(":")[0]

    await state.update_data(prefix=prefix)
    await state.set_state(GotoPage.waiting_for_page_number)

    await call.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:")
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@router.message(StateFilter(GotoPage.waiting_for_page_number))
async def process_goto_page(message: Message, state: FSMContext):
    user_data = await state.get_data()
    prefix = user_data.get("prefix")

    try:
        page = int(message.text.strip()) - 1
        if page < 0:
            raise ValueError

    except ValueError:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if prefix == "courses":
        from handlers.main_handler import load_courses
        await load_courses(message, page=page)
    elif prefix == "resources":
        from handlers.main_handler import load_resources
        await load_resources(message, page=page)
    elif prefix == "terms":
        from handlers.main_handler import load_terms
        await load_terms(message, page=page)

    await state.clear()

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
async def send_grouped_blocks(message: Message, items: list, formatter, block_size: int = 5, parse_mode=None):
    for i in range(0, len(items), block_size):
        block = items[i:i + block_size]
        text = "\n\n".join(formatter(item) for item in block)
        await message.answer(text, parse_mode=parse_mode)

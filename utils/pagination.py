from aiogram import types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
import sqlite3

router = Router()

ITEMS_PER_PAGE = 5

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ Markdown
def escape_markdown(text: str) -> str:
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + c if c in escape_chars else c for c in text])

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º FSM –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
class GotoPage(StatesGroup):
    waiting_for_page_number = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
def get_pagination_keyboard(page: int, total_pages: int, prefix: str) -> InlineKeyboardMarkup:
    buttons = []

    if page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}:{page - 1}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"{prefix}:{page + 1}"))
    buttons.append(InlineKeyboardButton(text="üî¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data=f"{prefix}:goto"))

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
    keyboard = []
    if len(buttons) > 2:
        keyboard.append(buttons[:-1])  # –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥/–í–ø–µ—Ä—ë–¥
        keyboard.append([buttons[-2]])  # –∫–Ω–æ–ø–∫–∞ –ü–µ—Ä–µ–π—Ç–∏
    else:
        keyboard.append(buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def send_paginated_data(message: Message, items: list, formatter, callback_prefix: str, page: int = 0):
    total_pages = (len(items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    current_items = items[start:end]

    text = "\n\n".join(formatter(item) for item in current_items)
    text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    keyboard = get_pagination_keyboard(page, total_pages, callback_prefix)

    await message.answer(text, reply_markup=keyboard)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def send_paginated_data(message: Message, items: list, formatter, callback_prefix: str, page: int = 0):
    total_pages = (len(items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    if page >= total_pages: 
        await message.answer("üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    current_items = items[start:end]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if not current_items:
        await message.answer("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    text = "\n\n".join(formatter(item) for item in current_items)
    text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    keyboard = get_pagination_keyboard(page, total_pages, callback_prefix)

    await message.answer(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@router.callback_query(F.data.regexp(r'^(courses|resources|terms):(\d+)$'))
async def paginate_callback(call: CallbackQuery):
    prefix, page = call.data.split(":")
    page = int(page)
    if prefix == "courses":
        from handlers.main_handler import load_courses
        await load_courses(call.message, page=page)
    elif prefix == "resources":
        from handlers.main_handler import load_resources
        await load_resources(call.message, page=page)
    elif prefix == "terms":
        from handlers.main_handler import load_terms
        await load_terms(call.message, page=page)

    await call.answer()

# –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
@router.callback_query(F.data.regexp(r'^(courses|resources|terms):goto$'))
async def goto_page_prompt(call: CallbackQuery, state: FSMContext):
    prefix = call.data.split(":")[0]

    await state.update_data(prefix=prefix)
    await state.set_state(GotoPage.waiting_for_page_number)

    await call.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:")
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@router.message(StateFilter(GotoPage.waiting_for_page_number))
async def process_goto_page(message: Message, state: FSMContext):
    user_data = await state.get_data()
    prefix = user_data.get("prefix")

    try:
        page = int(message.text.strip()) - 1
        if page < 0:
            raise ValueError

    except ValueError:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if prefix == "courses":
        from handlers.main_handler import load_courses
        await load_courses(message, page=page)
    elif prefix == "resources":
        from handlers.main_handler import load_resources
        await load_resources(message, page=page)
    elif prefix == "terms":
        from handlers.main_handler import load_terms
        await load_terms(message, page=page)

    await state.clear()

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
async def send_grouped_blocks(message: Message, items: list, formatter, block_size: int = 5, parse_mode=None):
    for i in range(0, len(items), block_size):
        block = items[i:i + block_size]
        text = "\n\n".join(formatter(item) for item in block)
        await message.answer(text, parse_mode=parse_mode)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤, —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
async def load_courses(message: Message, page: int = 0):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, description FROM courses")
    courses = cursor.fetchall()
    conn.close()

    if not courses:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await send_paginated_data(message, courses, lambda course: f"*{escape_markdown(course[0])}*\n{escape_markdown(course[1])}", "courses", page)

async def load_resources(message: Message, page: int = 0):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, link FROM resources")
    resources = cursor.fetchall()
    conn.close()

    if not resources:
        await message.answer("–†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await send_paginated_data(message, resources, lambda resource: f"*{escape_markdown(resource[0])}*\n{escape_markdown(resource[1])}\n[–°—Å—ã–ª–∫–∞]({escape_markdown(resource[2])})", "resources", page)

async def load_terms(message: Message, page: int = 0):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT term, definition FROM it_terms")
    terms = cursor.fetchall()
    conn.close()

    if not terms:
        await message.answer("–¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await send_paginated_data(message, terms, lambda term: f"*{escape_markdown(term[0])}*\n{escape_markdown(term[1])}", "terms", page)

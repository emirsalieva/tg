from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
import json
from aiogram import Bot
from aiogram.types import BotCommand

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫—É—Ä—Å–∞–º–∏ (–±–µ–∑ –ë–î)
def get_study_plan_keyboard():
    courses = [
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        "Web-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞",
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞",
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
        "–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π —è–∑—ã–∫",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    ]

    buttons = []
    for course_name in courses:
        callback_data = f"btn_course:{course_name[:64]}".replace(" ", "_").replace("-", "_").lower()
        buttons.append(InlineKeyboardButton(text=course_name, callback_data=callback_data))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å row_width=2
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –ë–î):")
    print(json.dumps(keyboard.model_dump(by_alias=True), indent=2, ensure_ascii=False))

    return keyboard

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
@router.message(F.text == "üìö –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")
async def show_study_plan(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=get_study_plan_keyboard())

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–æ—Å—Ç–∞–≤–∏–º –ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.callback_query(F.data.startswith("btn_course:"))
async def show_course_info(callback: CallbackQuery):
    course_name = callback.data.split(":")[1]
    course_name = course_name.replace("_", " ")
    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {course_name} (–¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –±—É–¥—É—Ç –ø–æ–∑–∂–µ)"
    await callback.message.answer(text)
    await callback.answer()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")],
            [KeyboardButton(text="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")],
            [KeyboardButton(text="üìñ –°–ª–æ–≤–∞—Ä—å IT —Ç–µ—Ä–º–∏–Ω–æ–≤")],
            [KeyboardButton(text="üë• –ì—Ä—É–ø–ø–∞ –ò–ù–ò–¢")]
        ],
        resize_keyboard=True
    )
    return keyboard



async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="support", description="üì© –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"),
        BotCommand(command="about", description="ü§ñ –û –±–æ—Ç–µ"),
    ]
    await bot.set_my_commands(commands)




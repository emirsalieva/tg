# handlers/admin_handler.py
from aiogram import Router, F, Bot 
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import os
import logging
import math 
from utils.pagination_admin import create_paginated_keyboard, ADMIN_DELETE_ITEMS_PER_PAGE
from keyboards.admin_keyboard import (
    admin_main_menu,
    manage_courses_keyboard,
    manage_resources_keyboard,
    manage_terms_keyboard,
    manage_groups_keyboard
)
from database.db_manager import (
    add_course, delete_course,
    add_resource,  delete_resource,
    add_term, delete_term,
    add_group,  delete_group,
    get_items_page, get_total_items_count
)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
router = Router()

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM 
class AdminStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_link = State()
    waiting_for_goto_page_number = State()
  
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin_access(event: Message | CallbackQuery) -> bool:
    try:
        admin_ids_str = os.getenv("ADMIN_IDS")
        if not admin_ids_str:
             logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
             if isinstance(event, Message):
                  await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
             elif isinstance(event, CallbackQuery):
                  await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", show_alert=True)
             return False

        ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(",")]
        user_id = event.from_user.id

        if user_id not in ADMIN_IDS:
            if isinstance(event, Message):
                 await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            elif isinstance(event, CallbackQuery):
                 await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
            return False
        return True
    except ValueError:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ADMIN_IDS: {os.getenv('ADMIN_IDS')}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
         if isinstance(event, Message):
              await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_IDS.")
         elif isinstance(event, CallbackQuery):
              await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_IDS.", show_alert=True)
         return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        if isinstance(event, Message):
             await event.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        elif isinstance(event, CallbackQuery):
             await event.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await check_admin_access(message): return
    await message.answer("üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_menu())

@router.message(F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º")
async def manage_courses(message: Message):
    if not await check_admin_access(message): return
    await message.answer("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º:", reply_markup=manage_courses_keyboard())

@router.message(F.text == "üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏")
async def manage_resources(message: Message):
    if not await check_admin_access(message): return
    await message.answer("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏:", reply_markup=manage_resources_keyboard())

@router.message(F.text == "üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º IT —Ç–µ—Ä–º–∏–Ω–æ–≤")
async def manage_terms(message: Message):
    if not await check_admin_access(message): return
    await message.answer("üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º IT —Ç–µ—Ä–º–∏–Ω–æ–≤:", reply_markup=manage_terms_keyboard())

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –ò–ù–ò–¢")
async def manage_groups(message: Message):
    if not await check_admin_access(message): return
    await message.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π –ò–ù–ò–¢:", reply_markup=manage_groups_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤  ---
@router.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"]))
async def add_entity_start(message: Message, state: FSMContext):
    if not await check_admin_access(message): return
    await state.set_data({"action": message.text})
    await state.set_state(AdminStates.waiting_for_name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove()) 

@router.message(StateFilter(AdminStates.waiting_for_name))
async def handle_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(name=name)
    await state.set_state(AdminStates.waiting_for_description)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

@router.message(StateFilter(AdminStates.waiting_for_description))
async def handle_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)

    data = await state.get_data()
    action = data["action"]

    if action == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω":
        try:
            success = add_term(data["name"], data["description"]) 
            if success:
                await message.answer(f"‚úÖ –¢–µ—Ä–º–∏–Ω '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_main_menu())
            else:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω '{data['name']}'. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=admin_main_menu())
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞: {e}")
             await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞.")
        finally:
            await state.clear()
    else:
        await state.set_state(AdminStates.waiting_for_link)
        await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (http:// –∏–ª–∏ https://):")

@router.message(StateFilter(AdminStates.waiting_for_link))
async def handle_link(message: Message, state: FSMContext):
    link = message.text.strip()
    data = await state.get_data()
    action = data.get("action")

    if action in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"]:
        if not link.startswith(("http://", "https://")):
            await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

    if not link: 
         await message.answer("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
         return

    name = data.get("name")
    description = data.get("description")

    try:
        success = False
        if action == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å":
            success = add_course(name, description, link) 
        elif action == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
            success = add_resource(name, description, link) 
        elif action == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É":
             success = add_group(name, description, link)
        else:
             logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ handle_link: {action}")
             await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
             success = False

        if success:
            await message.answer(f"‚úÖ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_main_menu())
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ '{name}'.", reply_markup=admin_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ handle_link: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")
    finally:
        await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π) ---
@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
async def delete_course_start(message: Message):
    if not await check_admin_access(message): return
    category = "course"
    total_items = await get_total_items_count(category)
    current_page_items = await get_items_page(category, 1, ADMIN_DELETE_ITEMS_PER_PAGE)

    if not current_page_items and total_items > 0:
         await message.answer("‚ÑπÔ∏è –ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.", reply_markup=manage_courses_keyboard())
         return
    elif not current_page_items and total_items == 0:
         await message.answer("‚ÑπÔ∏è –ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_courses_keyboard()) 
         return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ pagination_utils
    keyboard = await create_paginated_keyboard(
        items=current_page_items,
        page=1,
        items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
        total_items=total_items,
        pagination_callback_prefix=f"navigate_delete_{category}", 
        item_callback_prefix=f"del_{category}_by_id", 
        item_id_index=0,
        item_name_index=1 
    )
    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å")
async def delete_resource_start(message: Message):
    if not await check_admin_access(message): return
    category = "resource"
    total_items = await get_total_items_count(category)
    current_page_items = await get_items_page(category, 1, ADMIN_DELETE_ITEMS_PER_PAGE)

    if not current_page_items and total_items > 0:
         await message.answer("‚ÑπÔ∏è –†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.", reply_markup=manage_resources_keyboard())
         return
    elif not current_page_items and total_items == 0:
         await message.answer("‚ÑπÔ∏è –†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_resources_keyboard())
         return

    keyboard = await create_paginated_keyboard(
        items=current_page_items,
        page=1,
        items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
        total_items=total_items,
        pagination_callback_prefix=f"navigate_delete_{category}",
        item_callback_prefix=f"del_{category}_by_id",
        item_id_index=0, 
        item_name_index=1, 
    )
    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω")
async def delete_term_start(message: Message):
    if not await check_admin_access(message): return
    category = "term"
    total_items = await get_total_items_count(category)
    current_page_items = await get_items_page(category, 1, ADMIN_DELETE_ITEMS_PER_PAGE)

    if not current_page_items and total_items > 0:
         await message.answer("‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.", reply_markup=manage_terms_keyboard())
         return
    elif not current_page_items and total_items == 0:
         await message.answer("‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_terms_keyboard())
         return

    keyboard = await create_paginated_keyboard(
        items=current_page_items,
        page=1,
        items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
        total_items=total_items,
        pagination_callback_prefix=f"navigate_delete_{category}",
        item_callback_prefix=f"del_{category}_by_name", 
        item_id_index=0,
        item_name_index=0, 
    )
    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def delete_group_start(message: Message):
    if not await check_admin_access(message): return
    category = "group"
    total_items = await get_total_items_count(category)
    current_page_items = await get_items_page(category, 1, ADMIN_DELETE_ITEMS_PER_PAGE)

    if not current_page_items and total_items > 0:
         await message.answer("‚ÑπÔ∏è –ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.", reply_markup=manage_groups_keyboard())
         return
    elif not current_page_items and total_items == 0:
         await message.answer("‚ÑπÔ∏è –ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_groups_keyboard())
         return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ pagination_utils
    keyboard = await create_paginated_keyboard(
        items=current_page_items,
        page=1,
        items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
        total_items=total_items,
        pagination_callback_prefix=f"navigate_delete_{category}",
        item_callback_prefix=f"del_{category}_by_id",
        item_id_index=0, 
        item_name_index=1,
    )
    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("del_course_by_id:"))
async def handle_delete_course_by_id(callback: CallbackQuery):
    if not await check_admin_access(callback): return
    category = "course"
    try:
        parts = callback.data.split(":")
        course_id = int(parts[1])
        current_page = 1 
        if len(parts) > 3 and parts[2] == 'page':
             current_page = int(parts[3])


        success = delete_course(course_id) 
        if success:
            await callback.answer(f"–ö—É—Ä—Å (ID: {course_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)
            total_items = await get_total_items_count(category)
            total_pages = math.ceil(total_items / ADMIN_DELETE_ITEMS_PER_PAGE) if total_items > 0 else 1 
            target_page = current_page
            if total_items > 0 and target_page > total_pages:
                 target_page = total_pages 
            if target_page < 1 and total_items > 0: target_page = 1
            if total_items == 0: target_page = 1 


            current_page_items = await get_items_page(category, target_page, ADMIN_DELETE_ITEMS_PER_PAGE)


            if not current_page_items and total_items > 0:
                 from keyboards.admin_keyboard import manage_courses_keyboard 
                 await callback.message.edit_text("‚ÑπÔ∏è –ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_courses_keyboard())

            elif not current_page_items and total_items == 0:
                  from keyboards.admin_keyboard import manage_courses_keyboard
                  await callback.message.edit_text("‚ÑπÔ∏è –ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_courses_keyboard())
            else:
                 keyboard = await create_paginated_keyboard(
                     items=current_page_items,
                     page=target_page,
                     items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
                     total_items=total_items,
                     pagination_callback_prefix=f"navigate_delete_{category}",
                     item_callback_prefix=f"del_{category}_by_id",
                     item_id_index=0, item_name_index=1,
                 )
                 await callback.message.edit_reply_markup(reply_markup=keyboard)


        else:
             await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å —Å ID {course_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    except (ValueError, IndexError) as e:
         logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback_data —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {callback.data} - {e}")
         await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –ø–æ ID: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.", show_alert=True)


@router.callback_query(F.data.startswith("del_resource_by_id:"))
async def handle_delete_resource_by_id(callback: CallbackQuery):
    if not await check_admin_access(callback): return
    category = "resource"
    try:
        parts = callback.data.split(":")
        resource_id = int(parts[1])
        current_page = 1
        if len(parts) > 3 and parts[2] == 'page':
             current_page = int(parts[3])

        success = delete_resource(resource_id) 

        if success:
            await callback.answer(f"–†–µ—Å—É—Ä—Å (ID: {resource_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)

            total_items = await get_total_items_count(category)
            total_pages = math.ceil(total_items / ADMIN_DELETE_ITEMS_PER_PAGE) if total_items > 0 else 1
            target_page = current_page
            if total_items > 0 and target_page > total_pages:
                 target_page = total_pages
            if target_page < 1 and total_items > 0: target_page = 1
            if total_items == 0: target_page = 1

            current_page_items = await get_items_page(category, target_page, ADMIN_DELETE_ITEMS_PER_PAGE)

            if not current_page_items and total_items > 0:
                 from keyboards.admin_keyboard import manage_resources_keyboard
                 await callback.message.edit_text("‚ÑπÔ∏è –†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_resources_keyboard())
            elif not current_page_items and total_items == 0:
                  from keyboards.admin_keyboard import manage_resources_keyboard
                  await callback.message.edit_text("‚ÑπÔ∏è –†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_resources_keyboard())
            else:
                 keyboard = await create_paginated_keyboard(
                     items=current_page_items,
                     page=target_page,
                     items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
                     total_items=total_items,
                     pagination_callback_prefix=f"navigate_delete_{category}",
                     item_callback_prefix=f"del_{category}_by_id",
                     item_id_index=0, item_name_index=1,
                 )
                 await callback.message.edit_reply_markup(reply_markup=keyboard)

        else:
            await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å —Å ID {resource_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    except (ValueError, IndexError) as e:
         logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback_data —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞: {callback.data} - {e}")
         await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞.", show_alert=True)


@router.callback_query(F.data.startswith("del_term_by_name:"))
async def handle_delete_term_by_name(callback: CallbackQuery):
    if not await check_admin_access(callback): return
    category = "term"
    try:
        parts = callback.data.split(":")
        term_name = parts[1]
        current_page = 1
        if len(parts) > 3 and parts[2] == 'page':
             current_page = int(parts[3])

        success = delete_term(term_name) 

        if success:
            await callback.answer(f"–¢–µ—Ä–º–∏–Ω '{term_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", show_alert=True)

            total_items = await get_total_items_count(category)
            total_pages = math.ceil(total_items / ADMIN_DELETE_ITEMS_PER_PAGE) if total_items > 0 else 1
            target_page = current_page
            if total_items > 0 and target_page > total_pages:
                 target_page = total_pages
            if target_page < 1 and total_items > 0: target_page = 1
            if total_items == 0: target_page = 1


            current_page_items = await get_items_page(category, target_page, ADMIN_DELETE_ITEMS_PER_PAGE)

            if not current_page_items and total_items > 0:
                 from keyboards.admin_keyboard import manage_terms_keyboard
                 await callback.message.edit_text("‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_terms_keyboard())
            elif not current_page_items and total_items == 0:
                  from keyboards.admin_keyboard import manage_terms_keyboard
                  await callback.message.edit_text("‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_terms_keyboard())
            else:
                 keyboard = await create_paginated_keyboard(
                     items=current_page_items,
                     page=target_page,
                     items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
                     total_items=total_items,
                     pagination_callback_prefix=f"navigate_delete_{category}",
                     item_callback_prefix=f"del_{category}_by_name",
                     item_id_index=0, item_name_index=0,
                 )
                 await callback.message.edit_reply_markup(reply_markup=keyboard)

        else:
            await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Ä–º–∏–Ω '{term_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è.", show_alert=True)
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback_data —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞: {callback.data} - {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞ –ø–æ –∏–º–µ–Ω–∏: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞.", show_alert=True)


@router.callback_query(F.data.startswith("del_group_by_id:"))
async def handle_delete_group_by_id(callback: CallbackQuery):
    if not await check_admin_access(callback): return
    category = "group"
    try:
        parts = callback.data.split(":")
        group_id = int(parts[1])
        current_page = 1
        if len(parts) > 3 and parts[2] == 'page':
             current_page = int(parts[3])

        success = delete_group(group_id) 

        if success:
            await callback.answer(f"–ì—Ä—É–ø–ø–∞ (ID: {group_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)

            total_items = await get_total_items_count(category)
            total_pages = math.ceil(total_items / ADMIN_DELETE_ITEMS_PER_PAGE) if total_items > 0 else 1
            target_page = current_page
            if total_items > 0 and target_page > total_pages:
                 target_page = total_pages
            if target_page < 1 and total_items > 0: target_page = 1
            if total_items == 0: target_page = 1

            current_page_items = await get_items_page(category, target_page, ADMIN_DELETE_ITEMS_PER_PAGE)

            if not current_page_items and total_items > 0:
                 from keyboards.admin_keyboard import manage_groups_keyboard
                 await callback.message.edit_text("‚ÑπÔ∏è –ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_groups_keyboard())
            elif not current_page_items and total_items == 0:
                  from keyboards.admin_keyboard import manage_groups_keyboard
                  await callback.message.edit_text("‚ÑπÔ∏è –ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=manage_groups_keyboard())
            else:
                 keyboard = await create_paginated_keyboard(
                     items=current_page_items,
                     page=target_page,
                     items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
                     total_items=total_items,
                     pagination_callback_prefix=f"navigate_delete_{category}",
                     item_callback_prefix=f"del_{category}_by_id",
                     item_id_index=0, item_name_index=1,
                 )
                 await callback.message.edit_reply_markup(reply_markup=keyboard)

        else:
            await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É —Å ID {group_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    except (ValueError, IndexError) as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ callback_data —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {callback.data} - {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ ID: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.", show_alert=True)


@router.callback_query(F.data.startswith("goto_delete_page:"))
async def ask_for_page_number(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not await check_admin_access(callback): return

    try:
        category = callback.data.split(":")[1] 
        await state.set_state(AdminStates.waiting_for_goto_page_number)
        await state.update_data(goto_category=category, original_message_id=callback.message.message_id, chat_id=callback.message.chat.id)

        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        await callback.answer()

    except IndexError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è goto_delete_page: {callback.data}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ goto_delete_page: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@router.message(StateFilter(AdminStates.waiting_for_goto_page_number))
async def process_goto_page_number(message: Message, state: FSMContext, bot: Bot):
    if not await check_admin_access(message):
        await state.clear() 
        return

    try:
        page_number_str = message.text.strip()
        page = int(page_number_str) 

        data = await state.get_data()
        category = data.get("goto_category")
        original_message_id = data.get("original_message_id")
        chat_id = data.get("chat_id")

        if not category or original_message_id is None or chat_id is None:
             logger.error("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è goto_page –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
             await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
             await state.clear() 
             return
        
        total_items = await get_total_items_count(category)
        total_pages = math.ceil(total_items / ADMIN_DELETE_ITEMS_PER_PAGE) if total_items > 0 else 1 

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1 or page > total_pages:
            await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {total_pages}:")
            return 

        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        items = await get_items_page(category, page, ADMIN_DELETE_ITEMS_PER_PAGE)

        # –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not items and total_items > 0:
             logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –ø—Ä–∏ total_items > 0 –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
             await message.answer("‚ö†Ô∏è –ù–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.")
             return 
        elif not items and total_items == 0:
             
             empty_message = f"‚ÑπÔ∏è {category.capitalize()} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
             if category == "course": empty_message = "‚ÑπÔ∏è –ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
             elif category == "resource": empty_message = "‚ÑπÔ∏è –†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
             elif category == "term": empty_message = "‚ÑπÔ∏è –¢–µ—Ä–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
             elif category == "group": empty_message = "‚ÑπÔ∏è –ì—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

             try:
                 await bot.edit_message_text(chat_id=chat_id, message_id=original_message_id, text=empty_message, reply_markup=None)
                 await message.answer("‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.") 
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
                 await message.answer("‚ÑπÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.") 
             await state.clear() 
             return


        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã ID –∏ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        item_id_index = 0 
        item_name_index = 1 
        item_callback_prefix_base = f"del_{category}_by_id" 

        if category == "term":
            item_id_index = 0 
            item_name_index = 0 
            item_callback_prefix_base = "del_term_by_name" 

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = await create_paginated_keyboard(
            items=items,
            page=page,
            items_per_page=ADMIN_DELETE_ITEMS_PER_PAGE,
            total_items=total_items,
            pagination_callback_prefix=f"navigate_delete_{category}",
            item_callback_prefix=item_callback_prefix_base,
            item_id_index=item_id_index,
            item_name_index=item_name_index
        )

        message_text = f"üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ {category.capitalize()} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        if category == "course": message_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        elif category == "resource": message_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        elif category == "term": message_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        elif category == "group": message_text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        try:
            await bot.edit_message_text(chat_id=chat_id, message_id=original_message_id, text=message_text, reply_markup=keyboard)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
             await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


        await state.clear() 

    except ValueError:
        data = await state.get_data()
        category = data.get("goto_category", "—ç–ª–µ–º–µ–Ω—Ç–æ–≤") 
        try:
             total_items = await get_total_items_count(category)
             total_pages = math.ceil(total_items / ADMIN_DELETE_ITEMS_PER_PAGE) if total_items > 0 else 1
             await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ **—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ** –æ—Ç 1 –¥–æ {total_pages}:")
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ total_items –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ catch ValueError: {e}")
             await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ **—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ**.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ process_goto_page_number: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        await state.clear() 

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –≤ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö
@router.callback_query(F.data == "back_to_admin")
async def back_from_deletion_inline(callback: CallbackQuery):
    if not await check_admin_access(callback): return
    await callback.message.edit_text("üë®‚Äçüíª –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_main_menu())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" –Ω–∞ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ 
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def back_to_admin_panel_message(message: Message):
    if not await check_admin_access(message): return
    await message.answer("üë®‚Äçüíª –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_main_menu())
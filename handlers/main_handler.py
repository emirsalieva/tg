from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import sqlite3
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
from keyboards.main_keyboard import get_main_keyboard
from utils.pagination import get_all_terms, send_paginated_data, send_grouped_blocks

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    first_name = message.from_user.first_name

    greeting = (
        "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.\n\n"
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}.\n"
        "üîç –Ø ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è"
        "–≤ —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞ –≤ –ò–ù–ò–¢.\n\n"
        "üß≠ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —á—ë—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã.\n"
        "–ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥? –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    

    await message.answer(
        greeting,
        reply_markup=get_main_keyboard()
    )
   
# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!** üåü\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö. üìöüíª\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "‚ú® **/start** ‚Äî –Ω–∞—á–Ω–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º! üöÄ\n"
        "‚ú® **/help** ‚Äî –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å –≤—Å–µ! üí°\n"
        "‚ú® **/support** ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã! üì©\n"
        "‚ú® **/about** ‚Äî —É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤ —É—á–µ–±–µ! ü§ñ\n\n"
        "üîç **–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º.** üñ±Ô∏è",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /support
@router.message(Command("support"))
async def cmd_support(message: Message):
    await message.answer(
        "üì© –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
        "[–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É](https://t.me/yokai_di)",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /about
@router.message(Command("about"))
async def cmd_about(message: Message):
    await message.answer(
        "ü§ñ **–û –±–æ—Ç–µ**\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã –≤ IT! üéìüíª\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤ IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ö–ì–£, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ —Å —Å–∞–º—ã–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏. üöÄ\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
        "üìö **–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω** ‚Äî –≤—Å–µ –∫—É—Ä—Å—ã –∏ –ª–µ–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ!\n"
        "üìñ **–°–ª–æ–≤–∞—Ä—å IT-—Ç–µ—Ä–º–∏–Ω–æ–≤** ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–π —Ç–µ—Ä–º–∏–Ω—ã, –∫–∞–∫ –ø—Ä–æ—Ñ–∏, —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏!\n"
        "üîó **–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã** ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–π –¥–ª—è —Å–µ–±—è –º–∏—Ä IT!\n"
        "üë• **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ** ‚Äî –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è —Å —Ç–≤–æ–∏–º–∏ –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º–∏! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è, –¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π. ü§ù"
        "üí° **–ë–æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è**, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ò –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –ø–∏—à–∏ –≤ /support! üòä",
        parse_mode="Markdown"
    )
  
# –ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
@router.message(lambda msg: msg.text == "üìö –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")
async def show_study_plan(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, description, link FROM courses')
    course_records = cursor.fetchall()
    conn.close()

    courses = [(name, description, link if link else "–°—Å—ã–ª–∫–∏ –Ω–µ—Ç") for _, name, description, link in course_records]

    await send_paginated_data(
        message=message,
        items=courses,
        formatter=lambda c: f"üìö {c[0]}\n{c[1]}\n{c[2]}",
        callback_prefix="courses"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã
@router.message(lambda msg: msg.text == "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
async def show_resources(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute('SELECT name, description, link FROM resources')
    resources = cursor.fetchall()
    conn.close()

    await send_paginated_data(
        message=message,
        items=resources,
        formatter=lambda r: f"üîó {r[0]}\n{r[1]}\n{r[2]}",
        callback_prefix="resources"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤
@router.message(F.text == "üìñ –°–ª–æ–≤–∞—Ä—å IT —Ç–µ—Ä–º–∏–Ω–æ–≤")
async def show_terms_menu(message: Message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–∏—Å–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî§ –ü–æ–∏—Å–∫ –ø–æ –±—É–∫–≤–µ", callback_data="terms_by_letter"),
            InlineKeyboardButton(text="üìÑ –í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã", callback_data="terms_all")
        ]
    ])

    await message.answer(
        "üî§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ IT —Ç–µ—Ä–º–∏–Ω–æ–≤:",
        reply_markup=keyboard
    )
@router.callback_query(F.data == "terms_by_letter")
async def terms_by_letter(call: CallbackQuery):
    await call.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IT-—Å–ª–æ–≤–∞—Ä—å! \n\n"
        "üî§ –í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –Ω–µ—ë (–∞–Ω–≥–ª–∏–π—Å–∫—É—é –∏–ª–∏ —Ä—É—Å—Å–∫—É—é). \n\n"
        "üìñ –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –±—É–∫–≤—ã —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ ‚Äî –±–æ—Ç –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫. \n\n"
        "üîò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
        "¬´–í—Å–µ —Ç–µ—Ä–º–∏–Ω—ã¬ª, ¬´–í–ø–µ—Ä—ë–¥¬ª, ¬´–ù–∞–∑–∞–¥¬ª. \n\n",
        parse_mode="Markdown"
    )
    await call.answer()

@router.callback_query(F.data == "terms_all")
async def terms_all(call: CallbackQuery):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –ë–î
    terms = get_all_terms()
    
    if not terms:
        await call.message.answer("üòï –í —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await send_paginated_data(
        message=call.message,
        items=terms,
        formatter=lambda t: f"<b>{t[0]}</b>\n{t[1]}",
        callback_prefix="terms_all"
    )
    await call.answer()


# –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã
@router.message(lambda msg: msg.text == "üë• –ì—Ä—É–ø–ø–∞ –ò–ù–ò–¢")
async def show_groups(message: Message):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute('SELECT name, description, link FROM groups')
    groups = cursor.fetchall()
    conn.close()

    if not groups:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    def escape_markdown(text: str) -> str:
        escape_chars = r'\_*[]()~`>#+-=|{}.!'
        return ''.join(['\\' + c if c in escape_chars else c for c in text])

    await send_grouped_blocks(
        message,
        items=groups,
        formatter=lambda group: f"*{escape_markdown(group[0])}*\n{escape_markdown(group[1])}\n[–°—Å—ã–ª–∫–∞]({escape_markdown(group[2])})",
        block_size=5,
        parse_mode="MarkdownV2"
    )


async def load_courses(message: Message, page: int = 0):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute('SELECT id, name, description, link FROM courses')
    course_records = cursor.fetchall()
    conn.close()

    courses = [(name, description, link or "–°—Å—ã–ª–∫–∏ –Ω–µ—Ç") for _, name, description, link in course_records]

    await send_paginated_data(
        message=message,
        items=courses,
        formatter=lambda c: f"üìö {c[0]}\n{c[1]}\n{c[2]}",
        callback_prefix="courses",
        page=page
    )

async def load_resources(message: Message, page: int = 0):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute('SELECT name, description, link FROM resources')
    resources = cursor.fetchall()
    conn.close()

    await send_paginated_data(
        message=message,
        items=resources,
        formatter=lambda r: f"üîó {r[0]}\n{r[1]}\n{r[2]}",
        callback_prefix="resources",
        page=page
    )

async def load_terms(message: Message, page: int = 0):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute('SELECT term, definition FROM terms')
    terms = cursor.fetchall()
    conn.close()

    await send_paginated_data(
        message=message,
        items=terms,
        formatter=lambda t: f"üß† {t[0]}\n{t[1]}",
        callback_prefix="terms",
        page=page
    )
